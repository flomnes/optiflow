/* Florian OMNES (florian.omnes@upmc.fr) */
/* 2015-2016 */

include "getARGV.idp"
include "macros.edp"
include "curvature.edp"

int config = getARGV("--config", 1);

real ll = 1.5;
mesh Th;
string meshname = "meshes/mesh"+config+".mesh";
cout << "Loading mesh " << meshname << "...";
Th = readmesh(meshname);
cout << "done." << endl;
cout.flush;

mesh Th2;

cout.precision(12);

/* Save results */
int save = getARGV("--save", 1);
//////////////////////////////////////////////////////////////////////////

/* Numerical parameters */
real mu = 1./200;
real muer = 1;

real binit = getARGV("--binit", 1e-2);
real btarget = getARGV("--btarget", 1e1);

real errc = getARGV("--errc", 1e-2);
real tau = getARGV("--tau", 1e-3);
real cv = getARGV("--cv", 1.0);
real l0 = getARGV("--l0", 1e1);

real alpha = getARGV("--alpha", 1.05);
real delta = getARGV("--delta", 1.);


real kc = getARGV("--kc", 1.); /* Set to -1 to compute the curvature on an obstacle in \Omega, +1 otherwise (default value) */

int iimax = getARGV("--iimax", 5);
int jjmax = getARGV("--jjmax", 1000);
int kkmax = getARGV("--kkmax", 3);

real beta = getARGV("--beta", 1.);

real rafftarget = getARGV("--rafftarget", 1e30); /* Par défaut, pas de raffinement variable */
real raffinit = getARGV("--raffinit",1./30);
int optraff = getARGV("--optraff", 1);
int navsto = getARGV("--navsto", 1); /* 1 = Navier-Stokes, 0 = Stokes. Default = 1 */
real gamma = getARGV("--gamma", 1.);
real minarea0 = getARGV("--minarea", 1e-4);
int every = getARGV("--saveevery", 3);

real minarea;
real gamma1 = 1-gamma;

real epsilon = 1e-6;
real epspen = 1e-6;
real arrns = 1e-6;
int ii, jj, kk;

real sv;

real J0, J1, L, L0 ,L1;
real tau1;
real l = l0;
real kmax;

real raff = raffinit;
real b = binit;

/* Connectivity data */
int[int,int] ordre(1,1);

int ct = 0;
int adaptcount = 0;

/* Constraint data */
real vol0 = vol(Th);
real p0 = perim(Th);
real voltarget = cv * vol0;
real pertarget = cv * p0;
real ctarget = beta*voltarget + (1-beta)*pertarget;
real c0 = beta*vol0 + (1-beta)*p0;
real multint;



//////////////////////////////////////////////////////////////////////////

fespace Qh(Th, P1);
fespace Vh(Th,P2);
fespace P0h(Th,P0);

Vh ux, uy, vx, vy, wx, wy, dux, duy, uxx, uyy, clx, cly;
Qh p,q, mx, dpx, dpy, dp, qq, phix, phiy, kappa, phi, psi;
P0h pn;

real muela = .5, laela = 1;



if(config == 1) {
  clx = (1-y)*(2./3-y);
  cly = 0;
 }

if(config == 2) {
  clx = poiseuillex(ll-2./9, 2./3+2./9, ll-1./3, 1, x, y)
    +poiseuillex(ll, 2./3, ll-1./9, 2./3+1./9, x, y)
    +poiseuillex(ll-1./9, 1./3-1./9, ll, 1./3, x, y)
    +poiseuillex(ll-1./3, 0, ll-2./9, 1./3-2./9, x, y);

  
  cly = poiseuilley(ll-2./9, 2./3+2./9, ll-1./3, 1, x, y)
    +poiseuilley(ll, 2./3, ll-1./9,2./3+1./9, x, y)
    +poiseuilley(ll-1./9,1./3-1./9,ll, 1./3, x, y)
    +poiseuilley(ll-1./3, 0, ll-2./9, 1./3-2./9, x, y);
 }

if (config == 3) {
  clx = y*(1-y);
  uxx = y^2*(1-y);
  uyy = 0;
  multint = int1d(Th,1)(clx)/int1d(Th,2)(uxx);
  uxx = uxx * multint; // Re-normalisation par le flux d'entrée
}

if(config == 4) {
  clx = 1;
  cly = 0;
  // Moindres carrés
  /* uxx = clx; */
  /* uxx = clx; */
  uxx = -(2*y-1)*(2*y+1)*((2*y-.5)^2+(2*y+.5)^2);

  multint = int1d(Th,1)(clx)/int1d(Th,2)(uxx);
  uxx = uxx * multint; // Re-normalisation par le flux d'entrée

  uyy = 0;
 }

if(config == 5) {
  real td = .5;
  clx = td*-3*y*(1-3*y)*(y<.5) - (1-td)*(3*y-2)*(1-(3*y-2))*(y>.5);
  cly = td*3*y*(1-3*y)*(y<.5) - (1-td)*(3*y-2)*(1-(3*y-2))*(y>.5);
  uxx = (x-1./3)*(2./3-x);
  multint = int1d(Th,1)(clx)/int1d(Th,2)(uxx);
  uxx = uxx * multint; // Re-normalisation of inlet flux
  uyy = 0;
 }

if(config == 6) {
  clx = y*(.3-y);
  cly = 0;
 }

if(config == 7) {
  clx = -(y-1./2)*(y+1./2);
  cly = 0;
 }

problem stokes([ux, uy, p], [vx, vy, q]) =
  int2d(Th)(2*mu*tr(EPS(ux,uy))*EPS(vx,vy) - p * div(vx,vy))
  +int2d(Th)(div(ux,uy)*q)
  -int2d(Th)(p*q*epsilon)
  /* +int2d(Th)(pn*(ux*vx+uy*vy)) /\* MATMOU *\/ */
  +on(3,ux=0,uy=0)
  +on(1,ux=clx, uy=cly);

/* Vérifié le 28/06/2016 */
macro ns () {
  {
    stokes;
    if(navsto) {

      int n;
      real err=0;
      cout << "Navier-Stokes";
      for( n=0;n< 15;n++) /* Newton Loop  */
	{
	  solve Oseen([dux,duy,dp],[vx,vy,qq]) =
	    int2d(Th)(2*mu*tr(EPS(dux,duy))*EPS(vx,vy)
		      + tr(UgradV(dux,duy, ux, uy))*[vx,vy]
		      + tr(UgradV(ux,uy,dux,duy))*[vx,vy]
		      - div(dux,duy)*qq - div(vx,vy)*dp
		      /* + pn*(dux*vx+duy*vy) /\* MATMOU *\/ */
		      - epsilon*dp*qq) 
	    +int2d(Th)(2*mu*tr(EPS(ux,uy))*EPS(vx,vy)
		       + tr(UgradV(ux,uy, ux, uy))*[vx,vy]
		       - div(ux,uy)*qq - div(vx,vy)*p
		       - epsilon*p*qq)
	    +on(1,3,dux=0,duy=0);

	  ux[] += dux[];
	  uy[] += duy[];
	  p[]  += dp[];
	  err = sqrt(int2d(Th)(tr(GRAD(dux,duy))*GRAD(dux,duy) + tr([dux,duy])*[dux,duy]) / int2d(Th)(tr(GRAD(ux,uy))*GRAD(ux,uy) + tr([ux,uy])*[ux,uy]));
	  cout << ".";
	  cout.flush;
	  if(err < arrns) break;
	}
      if(err > arrns)
	{
	  cout << "NS Warning : non convergence : err = " << err << " / eps = " << epsilon << endl;
	}
    }
  }
  cout << endl;
}//EOF

/* Vérifié le 28/06/2016 */
macro adjoint() {
    solve probadjoint([vx, vy, q], [wx, wy, qq]) =
      int2d(Th) (2*mu*tr(EPS(vx, vy))*EPS(wx, wy) - q*div(wx, wy) -qq * div(vx, vy) + navsto*(tr(UgradV(wx, wy, ux, uy))*[vx, vy] + tr(UgradV(ux,uy,wx,wy))*[vx,vy]))
      +int2d(Th)(- 4*mu*delta*tr(EPS(ux,uy))*EPS(wx,wy))
      +int1d(Th,2)(-(1-delta)*((ux-uxx)*wx+(uy-uyy)*wy))
      
      +on(1,3,5, vx=0, vy=0);
    /* plot([vx, vy], wait=1, cmm="adjoint");     */
}//EOM

macro regulbord() {
  solve regb([dpx, dpy],[phix, phiy]) =
    int2d(Th)(gamma*tr(SIG(dpx, dpy))*EPS(phix, phiy))
    +int1d(Th,3)(gamma1*tr(gradT(dpx))*gradT(phix))
    +int1d(Th,3)(gamma1*tr(gradT(dpy))*gradT(phiy))
    +int1d(Th,3)(gradDF*dotN(phix, phiy))
    +int1d(Th,4)(1./epspen*dotN(dpx,dpy)*dotN(phix,phiy))
    +on(1, 2, dpx=0)
    +on(1, 2, dpy=0);

} //EOM
	   
string strname = getARGV("--resu", "");
cout << "Results and figures will be saved in " << strname << endl;
//strname = "resu/"+strname;
system("mkdir "+strname);
savemesh(Th, strname+"/initmesh.msh");
/* Save the command */
ofstream cmd(strname+"/commande.sh");
for(int ii = 0; ii < ARGV.n; ii++) {
  cmd << ARGV[ii] << " ";
 }
cmd << endl;
cmd.flush;
ofstream r(strname+"/out.dat");
ofstream volc(strname+"/voltarget");
volc << ctarget << endl;
volc.flush;

calculconnect(Th, ordre);
courbure(Th, ordre, kappa[]);
kappa = kc * kappa;
ns;	    
J0 = J;
{
ofstream j0of(strname+"/J0");
 j0of << J0 << endl;
 j0of.flush;
}


sv = 1+errc; // Arbitrary choice of sv such that sv > errc
r << J << " " <<  EL << " " << contr(Th) << " " << l << " " << sv << " " << b << " " << minarea << endl;
for (jj = 0; (sv > errc) && (jj < jjmax); jj++) {
  for (ii = 0; ii < iimax; ii++) {
    Th2 = Th;
    ns;
    adjoint;
    regulbord;
    L0 = EL;
    tau1 = tau;
    for (kk = 0;kk < kkmax; kk++) {
      cout << "movemesh tau = "<< tau1 << endl;
      minarea = checkmovemesh(Th2, [x + tau1*dpx, y + tau1*dpy]);
      if(optraff) {
	if (minarea > minarea0 || adaptcount>=3) {
	  Th = movemesh(Th2, [x + tau1*dpx, y + tau1*dpy]);
	} else {
	    cout << "*** ADAPTMESH *** minarea = " << minarea << " minarea0 = " << minarea0 << endl;
	    Th = adaptmesh(Th, hmax=raff, hmin=raff/sqrt(2), ratio=1.5);
	    cout << " new minarea = " << minarea << endl;
	    minarea = checkmovemesh(Th2, [x + tau1*dpx, y + tau1*dpy]);

	    kappa = 0; /* DO NOT REMOVE */
	    calculconnect(Th, ordre);
	    adaptcount++;
	  }
	if(adaptcount>3) {
	    cout << "Too many consecutive mesh adaptations. Giving up mesh adaptation" << endl;
	  }
      } else {
	Th = movemesh(Th2, [x + tau1*dpx, y + tau1*dpy]);
      }

      courbure(Th, ordre, kappa[]);
      kappa = kc * kappa;
      ns;
      adjoint;
      L1 = EL;
      tau1/= 2;
      cout << "L = " << L1 << " / L0 = " << L0 << " (variation = " << 100*(L1-L0)/L0 << "%)" << endl;
      if (L1 < L0) {
	break;
      }
    }
    cout << "kk = " << kk << endl;
    if (kk == kkmax) {
      cout << "Warning : L_{n+1}>L_{n} (L0 = " << L0 << ", l = " << l << ")" << endl;
      ii = iimax; /* Update the Lagrange multiplier, since we can't further decrease L */
    }
    sv = sqrt(int1d(Th, 3)(dpx^2+dpy^2));
/* OUTPUT */
      r << J << " " <<  EL << " " << contr(Th) << " " << l << " " << sv << " " << b << " " << minarea << endl;
  }

  l = l + b * (contr(Th) - ctarget);
  if (b < btarget) {
    b *= alpha;
  }

  /* Save post-processing data */
  
  if(save && (jj % every == 0)) {
    plot(Th, [dpx, dpy], ps=strname+"/displacement"+ct+".ps", wait=0, value=1, cmm="Iteration "+jj+"/"+jjmax+" (config "+config+")");
    Vh tmpvh = tr(EPS(ux,uy))*EPS(ux,uy);
    plot(tmpvh, ps=strname+"/energs.ps", cmm="Dissipated energy", wait=0, fill=1, value=1);
    plot(Th, [ux, uy], ps=strname+"/velocity"+ct+".ps", wait=0, value=1, cmm="Iteration "+jj+"/"+jjmax+" (config "+config+")");

    mx=sqrt(dx(dpx)^2+dy(dpy)^2);
    plot(mx, fill=1, value=1,cmm="\|V\|", ps=strname+"/gradnorm"+ct+".ps");
  
    plot(Th, ps=strname+"/mesh"+ct+".ps", wait=0, value=1, cmm="Iteration "+jj+"/"+jjmax+" (config "+config+")");
    plot(Th, ps=strname+"/mesh.nv"+ct+".ps", wait=0);    
    savemesh(Th, strname+"/mesh"+ct+".msh");
    
    ct++;
    r.flush;
    J1 = J;
    cout << "jj = " << jj << endl;
  }
 }


/* Save post-processing data */
if(save) {
  plot(Th, [ux,uy], ps=strname+"/velocity.ps", cmm="Velocity", wait=0);
  savemesh(Th, strname+"/mesh_final.msh");
  r.flush;
 }
